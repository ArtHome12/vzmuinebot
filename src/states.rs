/* ===============================================================================
Restaurant menu bot.
Dialogue FSM. 14 May 2021.
----------------------------------------------------------------------------
Licensed under the terms of the GPL version 3.
http://www.gnu.org/licenses/gpl-3.0.html
Copyright (c) 2020 by Artem Khomenko _mag12@yahoo.com.
=============================================================================== */

use derive_more::From;
use teloxide_macros::{Transition, teloxide, };
use teloxide::{prelude::*, types::{ReplyMarkup, KeyboardButton, KeyboardMarkup, }};
use std::str::FromStr;
use strum::{AsRefStr, EnumString,};

// use crate::database as db;
use crate::environment as set;
use crate::gear::*;


// FSM states
#[derive(Transition, From)]
pub enum Dialogue {
   Start(StartState), // initial state
   Command(CommandState), // await for select menu item from bottom
   Settings(GearState), // in settings menu
   SettingsTitle(GearStateEditing), // in settings menu edit field
}

impl Default for Dialogue {
   fn default() -> Self {
      Self::Start(StartState { restarted: true })
   }
}

// Main menu
#[derive(AsRefStr, EnumString)]
enum MainMenu {
   #[strum(to_string = "‚öô")]
   Gear,  // settings menu
   #[strum(to_string = "üõí")]
   Basket,  // basket menu
   #[strum(to_string = "–í—Å–µ")]
   All,  // show all items
   #[strum(to_string = "–û—Ç–∫—Ä—ã—Ç–æ")]
   Now,  // show opened items
   Unknown,
}

// Convert for flag value
pub fn to_flag(text: String) -> Result<bool, String> {
   match text.as_str() {
      "–í–∫–ª." => Ok(true),
      "–í—ã–∫–ª." => Ok(false),
      _ => Err(format!("–û–∂–∏–¥–∞–µ—Ç—Å—è –í–∫–ª. –∏–ª–∏ –í—ã–∫–ª., –ø–æ–ª—É—á–∏–ª–∏ {}", text)),
   }
}

pub fn from_flag(flag: bool) -> String {
   if flag { String::from("–í–∫–ª.") }
   else { String::from("–í—ã–∫–ª.") }
}


// Frequently used menu
pub fn cancel_markup() -> ReplyMarkup {
   kb_markup(vec![vec![String::from("/")]])
}

pub fn flag_markup() -> ReplyMarkup {
   kb_markup(vec![vec![from_flag(true), from_flag(false)]])
}


pub fn kb_markup(keyboard: Vec<Vec<String>>) -> ReplyMarkup {
   let kb:  Vec<Vec<KeyboardButton>> = keyboard.iter()
   .map(|row| {
      row.iter()
      .map(|label| KeyboardButton::new(label))
      .collect()
   }).collect();

   let markup = KeyboardMarkup::new(kb)
   .resize_keyboard(true);

   ReplyMarkup::Keyboard(markup)
}


pub struct StartState {
   pub restarted: bool,
}

#[teloxide(subtransition)]
async fn start(state: StartState, cx: TransitionIn<AutoSend<Bot>>, _ans: String,) -> TransitionOut<Dialogue> {
   enter(state, cx, _ans).await
}

pub async fn enter(state: StartState, cx: TransitionIn<AutoSend<Bot>>, _ans: String,) -> TransitionOut<Dialogue> {
   // Extract user id
   let user = cx.update.from();
   if user.is_none() {
      cx.answer("Error, no user").await?;
      return next(StartState { restarted: false });
   }

   // For admin and regular users there is different interface
   let user_id = user.unwrap().id;
   let is_admin = set::is_admin_id(user_id);

   // Prepare menu
   let commands = vec![
      String::from(MainMenu::Basket.as_ref()),
      String::from(MainMenu::All.as_ref()),
      String::from(MainMenu::Now.as_ref()),
      String::from(MainMenu::Gear.as_ref()),
   ];
   let markup = kb_markup(vec![commands]);

   let info = String::from(if state.restarted { "–ò–∑–≤–∏–Ω–∏—Ç–µ, –±–æ—Ç –±—ã–ª –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω.\n" } else {""});
   let info = info + if is_admin {
      "–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏: https://github.com/ArtHome12/vzmuinebot"
   } else {
      "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ '–í—Å–µ' –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞, '–û—Ç–∫—Ä—ã—Ç–æ' –¥–ª—è —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö —Å–µ–π—á–∞—Å, –ª–∏–±–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞."
   };

   cx.answer(info)
   .reply_markup(markup)
   .disable_web_page_preview(true)
   .await?;
   next(CommandState { user_id, is_admin })
}

pub struct CommandState {
   pub user_id: i64,
   pub is_admin: bool,
}

#[teloxide(subtransition)]
async fn select_command(state: CommandState, cx: TransitionIn<AutoSend<Bot>>, ans: String,) -> TransitionOut<Dialogue> {
   // Parse and handle commands
   let cmd = MainMenu::from_str(ans.as_str()).unwrap_or(MainMenu::Unknown);
   match cmd {
      MainMenu::Gear => crate::gear::enter(state, cx).await,
      MainMenu::All => crate::node::enter(state, cx).await,
      MainMenu::Basket 
      | MainMenu::Now 
      | MainMenu::Unknown => {
         cx.answer(format!("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ {}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥ –≤–Ω–∏–∑—É (–µ—Å–ª–∏ –ø–∞–Ω–µ–ª—å —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Å–∫—Ä—ã—Ç–∞, –æ—Ç–∫—Ä–æ–π—Ç–µ –µ—ë)", ans)).await?;
         next(state)
      }
   }
}
